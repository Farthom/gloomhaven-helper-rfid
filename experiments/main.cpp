#include <vector>
#include <iostream>
#include <stdint.h>

#include "print.hpp"
#include "model/gameState.hpp"

#include "protocol/deserializer.hpp"
#include "protocol/header.hpp"
#include "protocol/message.hpp"
#include "protocol/v8_0/protocol.hpp"
#include "protocol/v7_6/protocol.hpp"

// const uint8_t buffer[] {0x00, -1, 0x01, -1, 0x73, -1, -1};
// uint8_t buffer[] {
//     0x00, 0x05, 0x76, 0x20, 0x37, 0x2e, 0x36, 0x00,
//     0x00, 0x01, 0x73,

//     0xa6,
//     0x01, 0x00, 0x00, 0x0c, 0x10, 0x01, 0x3a, 0x03, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01,
//     0x00, 0x03, 0x14, 0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x01, 0x06, 0x05, 0x01, 0x00, 0x00, 0x00,
//     0x03, 0x00, 0x01, 0x03, 0x02, 0x04, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
//     0x06, 0x00, 0x00, 0x08, 0x35, 0x33, 0x37, 0x31, 0x36, 0x34, 0x30, 0x32, 0x0a, 0x00, 0x00, 0x08,
//     0x51, 0x52, 0x57, 0x55, 0x56, 0x54, 0x53, 0x50, 0x0b, 0x00, 0x00, 0x08, 0x5c, 0x5f, 0x58, 0x5d,
//     0x5e, 0x5b, 0x59, 0x5a, 0x0d, 0x00, 0x00, 0x08, 0x6c, 0x68, 0x6f, 0x6d, 0x69, 0x6e, 0x6b, 0x6a,
//     0x06, 0x01, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x61, 0x64, 0x73, 0x66, 0xe1, 0x06, 0x00, 0x0c,
//     0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x04, 0x00, 0x04, 0x06,
//     0x01, 0x00, 0x31, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x03, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x0e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
// };
uint8_t buffer[] {
    0x00, 0x05, 0x76, 0x20, 0x37, 0x2e, 0x36, 0x00, 0x00, 0x01, 0x73,
    0xa6,
    0x01, 0x00, 0x00, 0x0c, 0x10, 0x01, 0x3a, 0x03, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01,
    0x00, 0x03, 0x14, 0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x01, 0x06, 0x05, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x01, 0x03, 0x02, 0x04, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
    0x06, 0x00, 0x00, 0x08, 0x35, 0x33, 0x37, 0x31, 0x36, 0x34, 0x30, 0x32, 0x0a, 0x00, 0x00, 0x08,
    0x51, 0x52, 0x57, 0x55, 0x56, 0x54, 0x53, 0x50, 0x0b, 0x00, 0x00, 0x08, 0x5c, 0x5f, 0x58, 0x5d,
    0x5e, 0x5b, 0x59, 0x5a, 0x0d, 0x00, 0x00, 0x08, 0x6c, 0x68, 0x6f, 0x6d, 0x69, 0x6e, 0x6b, 0x6a,
    0x06, 0x01, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x61, 0x64, 0x73, 0x66, 0xe1, 0x06, 0x00, 0x0c,
    0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x04, 0x00, 0x04, 0x06,
    0x01, 0x00, 0x31, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x03, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00
};
// uint8_t buffer[] {
//     0x00, 0x05, 0x76, 0x20, 0x37, 0x2e, 0x36, 0x00, 0x00, 0x01, 0x73,
//     0x8a,
//     0x01,
//     0x00, 0x00, 0x0c, 0x12, 0x01, 0x3a, 0x03, 0x01,
//     0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x03, 0x14, 0x00, 0x01, 0x01, 0x00, 0x03, 0x03,
//     0x01, 0x06, 0x05, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x03, 0x02, 0x04, 0x03, 0x00, 0x00,
//     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x00, 0x00, 0x08, 0x35, 0x33, 0x37, 0x31, 0x36,
//     0x34, 0x30, 0x32, 0x0a, 0x00, 0x00, 0x08, 0x51, 0x52, 0x57, 0x55, 0x56, 0x54, 0x53, 0x50, 0x0b,
//     0x00, 0x00, 0x08, 0x5c, 0x5f, 0x58, 0x5d, 0x5e, 0x5b, 0x59, 0x5a, 0x0d, 0x00, 0x00, 0x08, 0x6c,
//     0x68, 0x6f, 0x6d, 0x69, 0x6e, 0x6b, 0x6a, 0x02, 0x01, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x61,
//     0x64, 0x73, 0x66, 0xe1, 0x06, 0x00, 0x0b, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x01, 0x80, 0x04, 0x00, 0x04, 0x06, 0x01, 0x00, 0x31, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00
// };
// const uint8_t buffer[] {0x00, -1, 0x01, -1, 0x73, -1, -1, 0x00, -1, 0x05, 0x76, -1, 0x20, 0x37, -1, 0x2e, 0x36};
// const uint8_t buffer[] {0xa0, -1, 0x01};
// const uint8_t buffer[] { 0x00, 0x03, 'a', 'b', 'c'};
// const uint8_t buffer[] {0xa0, -1, 0x01, -1, -1, 0xa0, -1, 0x01, 0xa0, 0x01};

int main()
{
    std::size_t bufferSize = sizeof(buffer);

    uint8_t *bufferPos = buffer;

    uint8_t outputBuffer[1024];

    while(true){
        tl::optional<ghr::protocol::Header> header;
        auto bytesRead = ghr::protocol::readHeader(bufferPos, bufferSize, header);
        bufferSize -= bytesRead;
        bufferPos += bytesRead;
        if(header.has_value())
        {
            auto bytesWritten = ghr::protocol::writeHeader(outputBuffer, 1024, header.value());
            ghr::protocol::readHeader(outputBuffer, 1024, header);
            auto head = header.value();
            std::cout << "Event: " << head.event << ", payload: " << head.payload << ", data length: " << head.length << "\n";

            if (head.event == "s"){
                if (head.length <= bufferSize){
                    ghr::protocol::Message m(bufferPos, head.length);
                    ghr::GameState s;
                    int32_t message_number = m.readFullInt();
                    ghr::protocol::v7_6::readGameState(s, m);
                    ghr::protocol::Message m2(outputBuffer, head.length);
                    m2.writeFullInt(message_number);
                    ghr::print("################################################\n");
                    ghr::protocol::v7_6::writeGameState(s, m2);

                    auto ok = true;
                    for (auto i = 0; i < head.length; i++){
                        ok &= outputBuffer[i] == bufferPos[i];
                    }
                    if (!ok){
                        std::cout << "Not OK! " << "\n";
                        for (auto i = 0; i < head.length; i++){
                            auto value = outputBuffer[i];
                            ok = outputBuffer[i] == bufferPos[i];
                            if (!ok){
                                std::cout << std::dec << "(" << i << ")" << std::hex << (int)value;
                                std::cout << "\n";
                            }
                        }
                        std::cout << std::dec << "\n";
                        for (auto i = 0; i < head.length; i++){
                            auto value = outputBuffer[i];
                            std::cout << std::hex << (int)value;
                            std::cout << " ";
                        }
                        std::cout << std::dec << "\n";
                        for (auto i = 0; i < head.length; i++){
                            auto value = bufferPos[i];
                            std::cout << std::hex << (int)value;
                            std::cout << " ";
                        }
                        std::cout << std::dec << "\n";
                    }
                    ghr::protocol::Message m3(outputBuffer, head.length);
                    message_number = m3.readFullInt();
                    ghr::protocol::v7_6::readGameState(s, m3);
                }
                else
                {
                    std::cout << head.length << " > " << bufferSize << "\n";
                    std::cout << "incomplete game state\n";
                    break;
                }
            }
            bufferSize -= head.length;
            bufferPos += head.length;
        }
        else
        {
            break;
        }

    }

    std::cout << "readBytes: " << (bufferPos-buffer) << "\n";
}
